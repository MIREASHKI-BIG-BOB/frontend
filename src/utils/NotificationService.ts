export class NotificationService {
  private hasPermission = false;
  private audioContext: AudioContext | null = null;
  
  constructor() {
    this.initializeNotifications();
  }
  
  private async initializeNotifications() {
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window) {
      if (Notification.permission === 'default') {
        const permission = await Notification.requestPermission();
        this.hasPermission = permission === 'granted';
      } else {
        this.hasPermission = Notification.permission === 'granted';
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    try {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    } catch (e) {
      console.warn('AudioContext not supported', e);
    }
  }
  
  async showNotification(title: string, options: {
    body?: string;
    icon?: string;
    tag?: string;
    requireInteraction?: boolean;
    actions?: { action: string; title: string }[];
  } = {}) {
    if (!this.hasPermission || !('Notification' in window)) {
      console.warn('Notifications not supported or permission denied');
      return null;
    }
    
    const notification = new Notification(title, {
      body: options.body,
      icon: options.icon || '/favicon.ico',
      tag: options.tag || 'fimea-alert',
      requireInteraction: options.requireInteraction || false,
      badge: '/favicon.ico',
      ...options
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è
    if (!options.requireInteraction) {
      setTimeout(() => {
        notification.close();
      }, 10000);
    }
    
    return notification;
  }
  
  playAlertSound(type: 'info' | 'warning' | 'critical' = 'warning', duration: number = 200) {
    if (!this.audioContext) return;
    
    const oscillator = this.audioContext.createOscillator();
    const gainNode = this.audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(this.audioContext.destination);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    switch (type) {
      case 'info':
        oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);
        gainNode.gain.setValueAtTime(0.1, this.audioContext.currentTime);
        break;
      case 'warning':
        oscillator.frequency.setValueAtTime(1000, this.audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(1200, this.audioContext.currentTime + duration / 1000);
        gainNode.gain.setValueAtTime(0.2, this.audioContext.currentTime);
        break;
      case 'critical':
        // –¢—Ä–µ–≤–æ–∂–Ω—ã–π –∑–≤—É–∫ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–Ω–æ–≤
        const freq1 = 800;
        const freq2 = 1200;
        oscillator.frequency.setValueAtTime(freq1, this.audioContext.currentTime);
        oscillator.frequency.setValueAtTime(freq2, this.audioContext.currentTime + 0.1);
        oscillator.frequency.setValueAtTime(freq1, this.audioContext.currentTime + 0.2);
        oscillator.frequency.setValueAtTime(freq2, this.audioContext.currentTime + 0.3);
        gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
        break;
    }
    
    // –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
    gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + duration / 1000);
    
    oscillator.start();
    oscillator.stop(this.audioContext.currentTime + duration / 1000);
  }
  
  async showAlertNotification(alert: {
    level: 'info' | 'warning' | 'danger' | 'critical';
    title: string;
    description: string;
    reasons: string[];
  }) {
    const isUrgent = alert.level === 'critical' || alert.level === 'danger';
    
    // –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
    let soundType: 'info' | 'warning' | 'critical' = 'warning';
    if (alert.level === 'critical') soundType = 'critical';
    else if (alert.level === 'info') soundType = 'info';
    
    this.playAlertSound(soundType, isUrgent ? 400 : 200);
    
    // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const body = alert.description + (alert.reasons.length > 0 ? '\n\n‚Ä¢ ' + alert.reasons[0] : '');
    
    const notification = await this.showNotification(
      `üö® ${alert.title}`,
      {
        body,
        tag: `alert-${alert.level}`,
        requireInteraction: isUrgent,
        actions: isUrgent ? [
          { action: 'view', title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏' },
          { action: 'acknowledge', title: '–ü—Ä–∏–Ω—è—Ç–æ –∫ —Å–≤–µ–¥–µ–Ω–∏—é' }
        ] : undefined
      }
    );
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (notification) {
      notification.onclick = () => {
        window.focus();
        notification.close();
      };
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      if (isUrgent) {
        setTimeout(() => {
          if (!notification.onclick) { // –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            this.playAlertSound('critical', 600);
          }
        }, 30000); // —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      }
    }
    
    return notification;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  get permissionStatus() {
    return {
      notifications: this.hasPermission,
      audio: !!this.audioContext
    };
  }
  
  // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞–Ω–æ–≤–æ
  async requestPermissions() {
    if ('Notification' in window && Notification.permission !== 'granted') {
      const permission = await Notification.requestPermission();
      this.hasPermission = permission === 'granted';
    }
    
    // –î–ª—è –∞—É–¥–∏–æ –Ω—É–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!this.audioContext) {
      try {
        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        if (this.audioContext.state === 'suspended') {
          await this.audioContext.resume();
        }
      } catch (e) {
        console.warn('AudioContext initialization failed', e);
      }
    }
    
    return this.permissionStatus;
  }
}